/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateUserTestArgs } from "./CreateUserTestArgs";
import { UpdateUserTestArgs } from "./UpdateUserTestArgs";
import { DeleteUserTestArgs } from "./DeleteUserTestArgs";
import { UserTestCountArgs } from "./UserTestCountArgs";
import { UserTestFindManyArgs } from "./UserTestFindManyArgs";
import { UserTestFindUniqueArgs } from "./UserTestFindUniqueArgs";
import { UserTest } from "./UserTest";
import { UserTestService } from "../userTest.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => UserTest)
export class UserTestResolverBase {
  constructor(
    protected readonly service: UserTestService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "UserTest",
    action: "read",
    possession: "any",
  })
  async _userTestsMeta(
    @graphql.Args() args: UserTestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [UserTest])
  @nestAccessControl.UseRoles({
    resource: "UserTest",
    action: "read",
    possession: "any",
  })
  async userTests(
    @graphql.Args() args: UserTestFindManyArgs
  ): Promise<UserTest[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => UserTest, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "UserTest",
    action: "read",
    possession: "own",
  })
  async userTest(
    @graphql.Args() args: UserTestFindUniqueArgs
  ): Promise<UserTest | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserTest)
  @nestAccessControl.UseRoles({
    resource: "UserTest",
    action: "create",
    possession: "any",
  })
  async createUserTest(
    @graphql.Args() args: CreateUserTestArgs
  ): Promise<UserTest> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserTest)
  @nestAccessControl.UseRoles({
    resource: "UserTest",
    action: "update",
    possession: "any",
  })
  async updateUserTest(
    @graphql.Args() args: UpdateUserTestArgs
  ): Promise<UserTest | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserTest)
  @nestAccessControl.UseRoles({
    resource: "UserTest",
    action: "delete",
    possession: "any",
  })
  async deleteUserTest(
    @graphql.Args() args: DeleteUserTestArgs
  ): Promise<UserTest | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
